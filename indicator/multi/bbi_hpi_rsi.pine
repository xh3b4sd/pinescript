//@version=4



// -------------------------------------------------------------------------- //



study(title="BBI, HPI, RSI", shorttitle="BBI, HPI, RSI", overlay=true)



// -------------------------------------------------------------------------- //



// new_per calculates the percentage of a fraction based on the given absolute
// value.
//
//     new_per(500, 5) => 1
//
new_per(abs, fra) =>
    fra * 100 / abs



// -------------------------------------------------------------------------- //



bbl = input(title="BBI Length", type=input.integer, defval=50,   minval=1,   step=1  )
bbs = input(title="BBI Stddev", type=input.float,   defval=1.65, minval=0.1, step=0.1)



// new_crb returns true if the current bar is red, that is, the current open
// price is higher than the current close price. This signals a local downward
// movement. Here crb means current red bar.
new_crb() =>
    open > close

// new_bbu returns the upper bollinger band based on the length given by bbl and
// the standard deviation given by bbs. Here bbu means bollinger band upper.
new_bbu(src, bbl, bbs) =>
    sma(src, bbl) + bbs * stdev(src, bbl)

new_bbi(src, bbl, bbs) =>
    ban = new_bbu(src, bbl, bbs)

    cou = 0
    bac = 8

    for i = 0 to bac
        cou := high[i] > ban[i] and ban[i] > low[i] ? cou + 1 : cou

    new_per(bac, cou) > 30 and not (high[0] > ban[0] and ban[0] > low[0]) and new_crb()



// -------------------------------------------------------------------------- //



hrb = input(title="HPI Recent Bar",   type=input.integer, defval=50,   minval=1,     step=1    )
hpc = input(title="HPI Price Change", type=input.float,   defval=0.05, minval=0.001, step=0.001)



// new_hps finds the highest price since reb. Here src is the source price e.g.
// close. Here reb means recent bars. Here hps means high price since.
new_hps(src, reb) =>
    lcp = src[0]

    for i = 0 to reb
        lcp := src[i] > lcp ? src[i] : lcp

    lcp

// new_hpb returns a high price indicator for the current bar, based on the
// recent bars and their associated price change. Here hpb means high price
// bar.
new_hpb(src, hrb, hpc) =>
    (new_per(src, new_hps(src, hrb)) - 100) > hpc ? na : true

// new_hpi returns a high price indicator for three or four high price signals
// in a row as calculated by new_hpb. Here hpi means high price indicator.
new_hpi(src, hrb, hpc) =>
    hpb = new_hpb(src, hrb, hpc)

    thr = hpb[0] and hpb[1] and hpb[2]
    fou = hpb[0] and hpb[1] and hpb[2] and hpb[3]

    thr or fou



// -------------------------------------------------------------------------- //



rsl = input(title="RSI Length", type=input.integer, defval=21, minval=1, step=1)
rsp = input(title="RSI Pivot",  type=input.integer, defval=60, minval=1, step=1)



// new_hpb returns the relative strength indicator for the current bar, based on
// the running moving average. Here rsb means relative strength bar.
new_rsb(src, rsl) =>
    upw = rma( max(change(src), 0), rsl)
    dow = rma(-min(change(src), 0), rsl)

    dow == 0 ? 100 : upw == 0 ? 0 : 100 - (100 / (1 + upw / dow))

// new_rsi returns the relative strength indicator for overbought price peaks.
// If the RSI band crosses under the RSI turning point given by rsp then new_rsi
// returns true.
new_rsi(src, rsl, rsp) =>
    new_rsb(src, rsl)[1] > rsp and new_rsb(src, rsl)[0] < rsp



// -------------------------------------------------------------------------- //


// new short trend indicator
new_sti() =>
    bbi = new_bbi(close, bbl, bbs)
    hpi = new_hpi(close, hrb, hpc)
    rsi = new_rsi(close, rsl, rsp)

    bhi = (bbi[0] and hpi[0]) or (bbi[0] and hpi[1]) or (bbi[1] and hpi[0])
    bri = (bbi[0] and rsi[0]) or (bbi[0] and rsi[1]) or (bbi[1] and rsi[0])
    hri = (hpi[0] and rsi[0]) or (hpi[0] and rsi[1]) or (hpi[1] and rsi[0])

    bhi or bri or hri



plotshape(new_sti(), text="SHORT", location=location.abovebar, style=shape.labeldown, size=size.tiny, color=color.red, textcolor=color.white, transp=0)
