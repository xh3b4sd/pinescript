//@version=4



// -------------------------------------------------------------------------- //



study(title="RTF", shorttitle="RTF", overlay=true)



// -------------------------------------------------------------------------- //



var OS = "OS" // Open Short. The signal to start a short trade.
var CS = "CS" // Close Short. The signal to end a short trade.
var OL = "OL" // Open Long. The signal to start a long trade.
var CL = "CL" // Close Long. The signal to end a long trade.



// -------------------------------------------------------------------------- //



// Active Reversal. Indicating the change of direction we are trading. That is,
// we go long or short multiple times.
var AR = array.new_bool(1, false)
get_car() =>
    array.get(AR, 0)
set_car(v) =>
    array.set(AR, 0, v)

// Current Cycle. The cycle of the current trade. Either OS, CS, OL or CL. Note
// that we start with the default value CL to go first with a short trade.
var CC = array.new_string(1, CL)
get_ccc() =>
    array.get(CC, 0)
set_ccc(v) =>
    array.set(CC, 0, v)

// First Price. The entry price of our current trade. Based on this price we
// decide when to take profit and when to move on.
var FP = array.new_float(1, 0.0)
get_cfp() =>
    array.get(FP, 0)
set_cfp(v) =>
    array.set(FP, 0, v)



// -------------------------------------------------------------------------- //



rtp = input(title="RTF Take Profit",     type=input.float,   defval=0.5, minval=0.1, step=0.1)
rar = input(title="RTF Active Reversal", type=input.float,   defval=0.3, minval=0.1, step=0.1)
hrb = input(title="HPI Recent Bar",      type=input.integer, defval=50,  minval=1,   step=1  )



// -------------------------------------------------------------------------- //



// new_per calculates the percentage of a fraction based on the given absolute
// value.
//
//     new_per(500, 5) => 1
//
new_per(abs, fra) =>
    fra * 100 / abs



// -------------------------------------------------------------------------- //



// new_hpi returns a high price indicator for the most recent bars since hrb.
// Here hpi means high price indicator.
new_hpi(hrb) =>
    highest(close, hrb) == close

// new_lpi returns a low price indicator for the most recent bars since hrb.
// Here lpi means low price indicator.
new_lpi(hrb) =>
    lowest(close, hrb) == close



// -------------------------------------------------------------------------- //



// new_cos returns a signal to open a short position. This signals the beginning
// of a trade aiming to profit from downward trends. After opening a short
// position we wait for the close short signal. Here cos means cycle open short.
new_cos() =>
    new_hpi(hrb) or new_hpi(hrb / 2)

// new_ccs returns a signal to close a short position. This signals the end of a
// trade aiming to profit from downward trends. After closing a short position
// we wait for the open long signal. Here ccs means cycle close short.
new_ccs() =>
    100 - new_per(get_cfp(), close) >= rtp

// new_col returns a signal to open a long position. This signals the beginning
// of a trade aiming to profit from upward trends. After opening a long position
// we wait for the close long signal. Here col means cycle open long.
new_col() =>
    new_lpi(hrb) or new_lpi(hrb / 2)

// new_ccl returns a signal to close a long position. This signals the end of a
// trade aiming to profit from upward trends. After closing a long position we
// wait for the open short signal. Here ccl means cycle close long.
new_ccl() =>
    100 - new_per(close, get_cfp()) >= rtp



// -------------------------------------------------------------------------- //



ccs = get_ccc() == OS and new_ccs() ? true : false
cos = get_ccc() == CS and new_cos() ? true : false
ccl = get_ccc() == OL and new_ccl() ? true : false
col = get_ccc() == CL and new_col() ? true : false



// -------------------------------------------------------------------------- //


// On any given cycle change we track the current cycle globally so that we
// always know in which cycle the current trade is in, if any. Note there might
// be no active trades for some time.
set_ccc(get_ccc() == OS and ccs ? CS : get_ccc())
set_ccc(get_ccc() == CS and cos ? OS : get_ccc())
set_ccc(get_ccc() == OL and ccl ? CL : get_ccc())
set_ccc(get_ccc() == CL and col ? OL : get_ccc())


if cos and not col
    set_cfp(close)

if col and not cos
    set_cfp(close)



// -------------------------------------------------------------------------- //



plotshape(cos, text=OS, location=location.abovebar, style=shape.labeldown, size=size.small, color=color.red,   textcolor=color.white, transp=0)
plotshape(ccs, text=CS, location=location.abovebar, style=shape.labeldown, size=size.small, color=color.red,   textcolor=color.white, transp=0)
plotshape(col, text=OL, location=location.belowbar, style=shape.labelup,   size=size.small, color=color.green, textcolor=color.white, transp=0)
plotshape(ccl, text=CL, location=location.belowbar, style=shape.labelup,   size=size.small, color=color.green, textcolor=color.white, transp=0)

plotshape(get_car(), text="AR", location=location.belowbar, style=shape.labelup,   size=size.small, color=color.purple, textcolor=color.white, transp=0)
