//@version=4



// -------------------------------------------------------------------------- //



study(title="RTF", shorttitle="RTF", overlay=true)



// -------------------------------------------------------------------------- //



var OS = "OS" // Open Short. The signal to start a short trade.
var CS = "CS" // Close Short. The signal to end a short trade.
var OL = "OL" // Open Long. The signal to start a long trade.
var CL = "CL" // Close Long. The signal to end a long trade.

var DS = "DS" // Direction Short.
var DL = "DL" // Direction Long.

var HR = #d32f2f // Hex Red. The red color for our color scheme indicating short trades. 
var HG = #388e3c // Hex Green. The green color for our color scheme indicating long trades. 



// -------------------------------------------------------------------------- //



// Current Cycle. The cycle of the current trade. Either OS, CS, OL or CL.
var CC = array.new_string(4, "")

emp_ccc() =>
    nos = array.get(CC, 0) == ""
    ncs = array.get(CC, 1) == ""
    nol = array.get(CC, 2) == ""
    ncl = array.get(CC, 3) == ""

    nos and ncs and nol and ncl

has_ccc(v) =>
    has = false

    if v == OS
        has := array.get(CC, 0) == OS
    if v == CS
        has := array.get(CC, 1) == CS
    if v == OL
        has := array.get(CC, 2) == OL
    if v == CL
        has := array.get(CC, 3) == CL

    has

onl_ccc(v) =>
    has = false

    if v == OS
        has := array.get(CC, 0) == OS and array.get(CC, 1) == "" and array.get(CC, 2) == "" and array.get(CC, 3) == ""
    if v == CS
        has := array.get(CC, 0) == "" and array.get(CC, 1) == CS and array.get(CC, 2) == "" and array.get(CC, 3) == ""
    if v == OL
        has := array.get(CC, 0) == "" and array.get(CC, 1) == "" and array.get(CC, 2) == OL and array.get(CC, 3) == ""
    if v == CL
        has := array.get(CC, 0) == "" and array.get(CC, 1) == "" and array.get(CC, 2) == "" and array.get(CC, 3) == CL

    has

rem_ccc(v) =>
    if v == OS
        array.set(CC, 0, "")
    if v == CS
        array.set(CC, 1, "")
    if v == OL
        array.set(CC, 2, "")
    if v == CL
        array.set(CC, 3, "")

set_ccc(v) =>
    if v == OS
        array.set(CC, 0, v)
    if v == CS
        array.set(CC, 1, v)
    if v == OL
        array.set(CC, 2, v)
    if v == CL
        array.set(CC, 3, v)



// -------------------------------------------------------------------------- //



// First Price. The entry price of our current trade. Based on this price we
// decide when to take profit and when to move on.
var FP = array.new_float(1, 0.0)
get_cfp() =>
    array.get(FP, 0)
set_cfp(v) =>
    array.set(FP, 0, v)



// -------------------------------------------------------------------------- //



// Last Price. The exit price of our current trade. Based on this price we
// decide which strategy to pursue with our next move.
var LP = array.new_float(1, 0.0)
get_clp() =>
    array.get(LP, 0)
set_clp(v) =>
    array.set(LP, 0, v)



// -------------------------------------------------------------------------- //



// Preferred Direction. This global helps to identify in which direction to
// trade next. Available constants are DS for direction short and DL for
// direction long.
var PD = array.new_string(1, "")

get_cpd() =>
    array.get(PD, 0)

has_cpd(v) =>
    array.get(PD, 0) == v

set_cpd(v) =>
    array.set(PD, 0, v)



// -------------------------------------------------------------------------- //



// Debug Flag. Only used for development. In complex decision trees we can print
// labels based on the position the global was modified. This can help a great
// deal figuring out why a certain trade was made.
var DF = array.new_string(1, "")

get_cdf() =>
    array.get(DF, 0)

has_cdf(v) =>
    array.get(DF, 0) == v

set_cdf(v) =>
    array.set(DF, 0, v)



// -------------------------------------------------------------------------- //



rtp = input(title="RTF Take Profit", type=input.float,   defval=0.4, minval=0.1, step=0.1)
hrb = input(title="HPI Recent Bar",  type=input.integer, defval=10,  minval=1,   step=1  )



// -------------------------------------------------------------------------- //



// new_per calculates the percentage of a fraction based on the given absolute
// value.
//
//     new_per(500, 5) => 1
//
new_per(abs, fra) =>
    fra * 100 / abs



// -------------------------------------------------------------------------- //



// new_hpi returns a high price indicator for the most recent bars since hrb.
// Here hpi means high price indicator.
new_hpi(hrb) =>
    highest(close, hrb) == close

// new_lpi returns a low price indicator for the most recent bars since hrb.
// Here lpi means low price indicator.
new_lpi(hrb) =>
    lowest(close, hrb) == close



// -------------------------------------------------------------------------- //



// new_pds returns true if the currently preferred trading direction is short.
// Here pds means preferred direction short.
new_pds() =>
    new_hpi(hrb * 2)

// new_pdl returns true if the currently preferred trading direction is long.
// Here pdl means preferred direction long.
new_pdl() =>
    new_lpi(hrb * 2)



// -------------------------------------------------------------------------- //



// new_cos returns a signal to open a short position. This signals the beginning
// of a trade aiming to profit from downward trends. After opening a short
// position we wait for the close short signal. Here cos means cycle open short.
new_cos() =>
    new_hpi(hrb) or new_hpi(hrb / 2)

// new_ccs returns a signal to close a short position. This signals the end of a
// trade aiming to profit from downward trends. After closing a short position
// we wait for the open long signal. Here ccs means cycle close short.
new_ccs() =>
    100 - new_per(get_cfp(), close) >= rtp

// new_col returns a signal to open a long position. This signals the beginning
// of a trade aiming to profit from upward trends. After opening a long position
// we wait for the close long signal. Here col means cycle open long.
new_col() =>
    new_lpi(hrb) or new_lpi(hrb / 2)

// new_ccl returns a signal to close a long position. This signals the end of a
// trade aiming to profit from upward trends. After closing a long position we
// wait for the open short signal. Here ccl means cycle close long.
new_ccl() =>
    100 - new_per(close, get_cfp()) >= rtp



// -------------------------------------------------------------------------- //



new_cyc() =>
    cos = new_cos()
    ccs = new_ccs()
    col = new_col()
    ccl = new_ccl()

    if emp_ccc()
        if cos
            set_ccc(OS)
            rem_ccc(CS)
            rem_ccc(OL)
            rem_ccc(CL)

            cos := true
            ccs := false
            col := false
            ccl := false

            set_cdf("1")

        else
            if ccs or col or ccl
                rem_ccc(OS)
                rem_ccc(CS)
                rem_ccc(OL)
                rem_ccc(CL)

                cos := false
                ccs := false
                col := false
                ccl := false

                set_cdf("2")

    else
        if onl_ccc(OS)
            if ccs or ccl
                if has_cpd(DS)
                    set_ccc(OS)
                    rem_ccc(CS)
                    rem_ccc(OL)
                    rem_ccc(CL)

                    cos := true
                    ccs := true
                    col := false
                    ccl := false

                    set_cdf("3")

                if has_cpd(DL)
                    rem_ccc(OS)
                    rem_ccc(CS)
                    set_ccc(OL)
                    rem_ccc(CL)

                    cos := false
                    ccs := true
                    col := true
                    ccl := false

                    set_cdf("4")

            else
                if cos or col
                    set_ccc(OS)
                    rem_ccc(CS)
                    rem_ccc(OL)
                    rem_ccc(CL)

                    cos := false
                    ccs := false
                    col := false
                    ccl := false

                    set_cdf("5")

        else
            if onl_ccc(CS)
                if cos or col
                    if has_cpd(DS)
                        set_ccc(OS)
                        rem_ccc(CS)
                        rem_ccc(OL)
                        rem_ccc(CL)

                        cos := true
                        ccs := false
                        col := false
                        ccl := false

                        set_cdf("6")

                    if has_cpd(DL)
                        rem_ccc(OS)
                        rem_ccc(CS)
                        set_ccc(OL)
                        rem_ccc(CL)

                        cos := false
                        ccs := false
                        col := true
                        ccl := false

                        set_cdf("7")

                else
                    if ccs or ccl
                        rem_ccc(OS)
                        set_ccc(CS)
                        rem_ccc(OL)
                        rem_ccc(CL)

                        cos := false
                        ccs := false
                        col := false
                        ccl := false

                        set_cdf("8")

            else
                if onl_ccc(OL)
                    if ccs or ccl
                        if has_cpd(DS)
                            set_ccc(OS)
                            rem_ccc(CS)
                            rem_ccc(OL)
                            rem_ccc(CL)

                            cos := true
                            ccs := false
                            col := false
                            ccl := true

                            set_cdf("9")

                        if has_cpd(DL)
                            rem_ccc(OS)
                            rem_ccc(CS)
                            set_ccc(OL)
                            rem_ccc(CL)

                            cos := false
                            ccs := false
                            col := true
                            ccl := true

                            set_cdf("10")

                    else
                        if cos or col
                            rem_ccc(OS)
                            rem_ccc(CS)
                            set_ccc(OL)
                            rem_ccc(CL)

                            cos := false
                            ccs := false
                            col := false
                            ccl := false

                            set_cdf("11")

                else
                    if onl_ccc(CL)
                        if cos or col
                            if has_cpd(DS)
                                set_ccc(OS)
                                rem_ccc(CS)
                                rem_ccc(OL)
                                rem_ccc(CL)

                                cos := true
                                ccs := false
                                col := false
                                ccl := false

                                set_cdf("12")

                            if has_cpd(DL)
                                rem_ccc(OS)
                                rem_ccc(CS)
                                set_ccc(OL)
                                rem_ccc(CL)

                                cos := false
                                ccs := false
                                col := true
                                ccl := false

                                set_cdf("13")

                        else
                            if ccs or ccl
                                rem_ccc(OS)
                                rem_ccc(CS)
                                rem_ccc(OL)
                                set_ccc(CL)

                                cos := false
                                ccs := false
                                col := false
                                ccl := false

                                set_cdf("14")

    [cos, ccs, col, ccl]


// -------------------------------------------------------------------------- //



[cos, ccs, col, ccl] = new_cyc()



// -------------------------------------------------------------------------- //



if cos or col
    set_cfp(close)

if ccs or ccl
    set_clp(close)



// -------------------------------------------------------------------------- //



if new_pds()
    set_cpd(DS)

if new_pdl()
    set_cpd(DL)



// -------------------------------------------------------------------------- //



barcolor(ccs and get_cfp() - get_clp() > 0 ? HR : na)
barcolor(ccl and get_clp() - get_cfp() > 0 ? HG : na)



// -------------------------------------------------------------------------- //



// plotshape(has_cdf( "1"), text="DEBUG  1", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf( "2"), text="DEBUG  2", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf( "3"), text="DEBUG  3", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf( "4"), text="DEBUG  4", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf( "5"), text="DEBUG  5", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf( "6"), text="DEBUG  6", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf( "7"), text="DEBUG  7", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf( "8"), text="DEBUG  8", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf( "9"), text="DEBUG  9", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf("10"), text="DEBUG 10", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf("11"), text="DEBUG 11", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf("12"), text="DEBUG 12", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf("13"), text="DEBUG 13", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)
// plotshape(has_cdf("14"), text="DEBUG 14", location=location.belowbar, style=shape.labelup, size=size.small, color=color.purple, textcolor=color.white, transp=50)



// -------------------------------------------------------------------------- //



plotshape(cos, text=OS, location=location.abovebar, style=shape.labeldown, size=size.small, color=HR, textcolor=color.white, transp=30)
plotshape(ccs, text=CS, location=location.belowbar, style=shape.labelup,   size=size.small, color=HR, textcolor=color.white, transp=30)
plotshape(col, text=OL, location=location.abovebar, style=shape.labeldown, size=size.small, color=HG, textcolor=color.white, transp=30)
plotshape(ccl, text=CL, location=location.belowbar, style=shape.labelup,   size=size.small, color=HG, textcolor=color.white, transp=30)
